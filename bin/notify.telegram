#!/usr/bin/perl

use strict;
use warnings;
use utf8;

use Clib::Proc qw|script1 lib|;
use Clib::Const ':utf8';
use Clib::Log 'log_notify';

use JSON::XS;
use Encode;

use WWW::Telegram::BotAPI;
use RedisDB;

use flyinf;

$SIG{__DIE__} = sub { error('DIE: %s', $_) for @_ };

###########################################################
###########################################################
###########################################################
my $p = log_prefix('telegram');
my $log = eval { JSON::XS->new->utf8->decode(join '', <STDIN>) };

wrong_format() if ref($log) ne 'ARRAY';
wrong_format() if grep { (ref($_) ne 'HASH') || !$_->{op} || (ref($_->{pers}) ne 'HASH') } @$log;

# Пользовательские регулярки
my $uall = redis(hgetall => 'uregexp');
if (ref($uall) ne 'ARRAY') {
    error('Can\'t get user\'s REGEXP');
    exit -1;
}
if (!@$uall) {
    error('User\'s REGEXP-list empty');
    exit -1;
}
my %uall = @$uall;

# Для всех строк логов подбираем chatid
my @log = ();
foreach my $l (@$log) {
    my $name = $l->{pers}->{name} || next;
    if ($l->{op} eq 'e') {
        my $prev = $l->{prev} || next;
        # При изменении оповещаем только если изменилась высота
        next if !exists($prev->{visota});
    }
    my @chatid =
        grep { $name =~ /^$uall{$_}$/i }
        keys %uall;
    push @log,
        map {
            { %$l, chatid => $_ }
        }
        @chatid;
}

if (!@log) {
    # некого оповещать
    exit;
}

# наш токен
my $token = c('telegram_token');
if (!$token) {
    error('`telegram_token` not defined');
    exit -1;
}

# Подключаемся к API и проверяем авторизацию
my $api = WWW::Telegram::BotAPI->new(token => $token);
my $me = request('getMe');
if (!$me->{ok} || !$me->{result} || !$me->{result}->{id}) {
    error('Not valid token or Telegram-API fail: %s', $me->{error});
    exit -1;
}

# отправляем сообщения
foreach my $l (@log) {
    my $cid = $l->{chatid} || next;
    my $p = $l->{pers} || next;
    my $fly = flyinf->fsheet($l->{fly}) || next;
    
    if ($l->{op} eq 'D') {
        reply(
            $cid,
            ntf_dup => 
                $p->{name},
                $fly->{name},
                $fly->{sheet}->{name}
        );
    }
    elsif ($l->{op} eq 'a') {
        reply(
            $cid,
            ntf_add => 
                $p->{name},
                $fly->{name},
                $fly->{sheet}->{name},
                $p->{visota}
        );
    }
    elsif ($l->{op} eq 'd') {
        reply(
            $cid,
            ntf_del => 
                $p->{name},
                $fly->{name},
                $fly->{sheet}->{name}
        );
    }
    elsif ($l->{op} eq 'e') {
        reply(
            $cid,
            ntf_edit => 
                $p->{name},
                $p->{visota},
                $fly->{name},
                $fly->{sheet}->{name}
        );
    }
}

exit 0;

#==========================================================
sub wrong_format {
    error(@_ ? @_ : 'WRONG INPUT FORMAT');
    exit -1;
}

sub request {
    my $method = shift();
    if (!$api) {
        error('api not inited');
        return;
    }
    local $SIG{__DIE__} = undef;
    my $r = eval { $api->api_request($method, @_ ? { @_ } : ()) };
    $r ||= { error => $@ || 'Unknown error' };
    return $r;
}

# Ответ в чат с пользователем
sub reply {
    my $chatid = shift();
    
    my $msg = shift();
    if (my $s = c(telegram_reply => $msg)) {
        $msg = $s;
    }
    
    $msg = sprintf($msg, @_) if @_;
    
    my $r = request(sendMessage => 
        chat_id => $chatid,
        text    => $msg,
    );
    
    if ($r) {
        if (my $err = $r->{error}) {
            error('Can\'t send to chatid=%d: %s', $chatid, $err);
        }
        elsif ($r->{result}) {
            debug('Send[chatid=%d] %s', $chatid, $msg);
        }
    }
    
    return $r && $r->{result} ? 1 : 0;
}

# Соединение с Redis
my $redis;
sub redis {
    $redis ||= RedisDB->new(
                raise_error => 0,
                lazy => 1,
                
                %{ c('redis')||{} },
            );
    
    $redis || return;
    
    @_ || return 1;
    
    my $command = shift;
    my @uccom = split /_/, uc $command;
    
    my $ret = $redis->execute(@uccom, @_);
    
    if (ref($ret) =~ /RedisDB\:\:Error/) {
        error('[Redis ERROR] : %s', $ret->as_string);
        return;
    }
    elsif (!$ret && $@) {
        error('[Redis EXCEPTION] : %s', $@);
        return;
    }
    
    if (defined($ret) && !ref($ret)) {
        Encode::_utf8_on($ret);
    }
    elsif (ref($ret) eq 'ARRAY') {
        foreach my $r (@$ret) {
            Encode::_utf8_on($r) if defined($r) && !ref($r);
        }
    }
    
    return $ret;
}

#==========================================================
#================================================== End ===
#==========================================================
